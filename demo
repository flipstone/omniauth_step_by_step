#!/usr/bin/env ruby

require 'yaml'
require 'observer'

RAILS_APP = 'library'
DEMO_STATE_FILE = '.demo'
SCRIPT_FILE = 'script.yml'

class Demo < Struct.new(:state_file, :script, :demo_dir, :state)
  include Observable

  def self.load(state_file, script_file, demo_dir)
    script = YAML.load_file script_file
    state = File.exist?(state_file) ? YAML.load_file(state_file) : {}

    new state_file, script, demo_dir, state
  end

  def move!(commit_or_symbol)
    commit = commit_or_symbol.is_a?(Symbol) ? send(commit_or_symbol) : commit_or_symbol

    raise ImpossiveMoveError, [current_commit, commit_or_symbol] unless commit

    run_command "git reset #{commit} --quiet -- #{demo_dir} && git clean -d --force --quiet -- #{demo_dir} && git checkout -- #{demo_dir}"
    state["current_commit"] = commit
    save!
    changed
    notify_observers script_location
  end

  def start!
    move! script.first["commit"]
  end

  def next
    find_next current_commit, script
  end

  def prev
    find_next current_commit, script.reverse
  end

  def current_commit
    state["current_commit"]
  end

  def script_location(at_commit = current_commit)
    script.detect { |l| l["commit"] == at_commit }
  end

  def status
    if current_commit
      "The demo is currently at #{script_location["commit"]}: #{script_location["description"]}"
    else
      "The demo hasn't started"
    end
  end

  def save!
    File.open(state_file, 'w') do |f|
      f << state.to_yaml
    end
  end

  def run_command(command)
    output = `#{command} 2>&1`

    unless $?.success?
      raise CommandError, [command, $?, output]
    end
  end

  protected

  def find_next(commit, script)
    (
      script.each_cons(2).detect do |prev, _|
        prev["commit"] == commit
      end || [{"commit" => nil}]
    ).last["commit"]
  end

  class DemoError < StandardError; end

  class CommandError < DemoError
    def initialize(args)
      command, process_status, output = *args
      super "command #{command.inspect} failed with status #{process_status.to_i}\n  and output:\n#{output}"
    end
  end

  class ImpossiveMoveError < DemoError
    def initialize(args)
      current_commit, commit_or_symbol = *args
      super "can't move to #{commit_or_symbol} from #{current_commit}.  No commit found in script"
    end
  end
end

class Highlighter
  def initialize(demo)
    @demo = demo
    demo.add_observer self
  end

  def update(script_location)
    if h = script_location["highlight"]
      unless ENV['EDITOR']
        raise Demo::DemoError, "Please set your EDITOR environment variable in order to highlight files"
      end
      files = h.map { |f| File.join(@demo.demo_dir, f) }
      fork do
        @demo.run_command "#{ENV['EDITOR']} #{files.join(" ")} &"
        exit!(0)
      end
    end
  end
end

class ServerRestarter
  def initialize(demo)
    @demo = demo
    demo.add_observer self
  end

  def update(script_location)
    unless ENV['DEMO_RESTART_COMMAND']
      raise Demo::DemoError, "Please set your DEMO_RESTART_COMMAND environment variable in order to allow demo to restart your server"
    end
    @demo.run_command ENV['DEMO_RESTART_COMMAND']
  end
end

demo = Demo.load(DEMO_STATE_FILE, SCRIPT_FILE, RAILS_APP)
Highlighter.new demo
ServerRestarter.new demo

commands = {
  'status' => -> do
    puts demo.status
  end,

  'start' => -> do
    demo.start!
    puts demo.status
  end,

  'peek' => -> do
    if demo.next
      puts "Next up: #{demo.script_location(demo.next)["description"]}"
    else
      puts "All done!"
    end
  end,

  'wait' => -> do
    print "Waiting for you (press Return to continue)"
    $stdout.flush
    $stdin.gets
  end,

  'next' => -> do
    demo.move! :next
    puts demo.status
  end,

  'prev' => -> do
    demo.move! :prev
    puts demo.status
  end
}

if (ARGV & commands.keys).empty?
  $stderr.puts <<-usage
Usage: ./demo [command]
  Commands:

  start - start the demo
  next - move to the next commit in the script
  prev - move to the previous commit in the script
  status - show the current status of the demo

  usage
  exit(1)
else
  begin
    ARGV.each do |command|
      commands[command].call
    end
  rescue Demo::DemoError => e
    $stderr.puts "demo: #{e.message}"
    exit(2)
  end
end
